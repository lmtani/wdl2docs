"""
Generate Workflow Graph Use Case

Generates a Markdown file with a Mermaid graph
for a single WDL workflow.
"""

import logging
from pathlib import Path
from typing import Optional, Any

import WDL
import WDL.Error
import WDL.Tree

from src.infrastructure.parsing.wdl_loader import WDLLoader
from src.infrastructure.parsing.graph_generator import generate_mermaid_graph

logger = logging.getLogger(__name__)


class GenerateWorkflowGraphUseCase:
    """
    Use case for generating a standalone workflow graph in Markdown.
    
    This use case orchestrates:
    1. Loading and parsing a WDL file
    2. Extracting the workflow
    3. Generating a Mermaid graph
    4. Rendering a Markdown file with the graph
    """

    def __init__(self):
        """Initialize the use case."""
        pass

    def execute(self, wdl_file: Path, output_file: Path) -> bool:
        """
        Execute the use case.
        
        Args:
            wdl_file: Path to the WDL file containing the workflow
            output_file: Path where the Markdown file should be saved
            
        Returns:
            True if successful, False otherwise
        """
        try:
            # Validate inputs
            if not wdl_file.exists():
                logger.error(f"WDL file not found: {wdl_file}")
                return False
                
            if not wdl_file.suffix == ".wdl":
                logger.error(f"File is not a WDL file: {wdl_file}")
                return False
            
            logger.info(f"Loading WDL file: {wdl_file}")
            
            # Load WDL file
            try:
                doc = WDLLoader.load_wdl_file(wdl_file)
            except WDL.Error.SyntaxError as e:
                logger.error(f"Syntax error in {wdl_file}: {e}")
                return False
            except Exception as e:
                logger.error(f"Error loading {wdl_file}: {e}")
                return False
            
            # Extract workflow
            workflow = self._extract_workflow(doc)
            if not workflow:
                logger.error(f"No workflow found in {wdl_file}")
                return False
            
            logger.info(f"Found workflow: {workflow.name}")
            
            # Generate Mermaid graph
            base_path = wdl_file.parent
            mermaid_graph = generate_mermaid_graph(workflow, wdl_file, base_path)
            
            if not mermaid_graph:
                logger.warning(f"Empty graph generated for workflow {workflow.name}")
                # Continue anyway - might be an empty workflow
            
            # Generate Markdown
            markdown_content = self._render_markdown(workflow.name, mermaid_graph, wdl_file)
            
            # Save Markdown file
            self._save_markdown(output_file, markdown_content)
            
            logger.info(f"âœ… Successfully generated workflow graph: {output_file}")
            return True
            
        except Exception as e:
            logger.error(f"Unexpected error generating workflow graph: {e}", exc_info=True)
            return False
    
    def _extract_workflow(self, doc: Any) -> Optional[WDL.Tree.Workflow]:
        """
        Extract the workflow from a WDL document.
        
        Args:
            doc: Parsed WDL document
            
        Returns:
            Workflow object or None if not found
        """
        if hasattr(doc, "workflow") and doc.workflow:
            return doc.workflow
        
        # Check if there's a workflow in imported documents
        if hasattr(doc, "imports"):
            for imp in doc.imports:
                if hasattr(imp, "doc") and imp.doc and hasattr(imp.doc, "workflow") and imp.doc.workflow:
                    return imp.doc.workflow
        
        return None
    
    def _render_markdown(self, workflow_name: str, mermaid_graph: str, wdl_file: Path) -> str:
        """
        Render the Markdown with the Mermaid graph.
        
        Args:
            workflow_name: Name of the workflow
            mermaid_graph: Mermaid graph syntax
            wdl_file: Path to the original WDL file
            
        Returns:
            Rendered Markdown content
        """
        markdown = f"""# {workflow_name}

**Workflow Execution Graph**

Source: `{wdl_file}`

## Workflow Diagram

```mermaid
{mermaid_graph}
```

---

*Generated by WDL2Doc*
"""
        return markdown
    
    def _save_markdown(self, output_file: Path, markdown_content: str) -> None:
        """
        Save Markdown content to file.
        
        Args:
            output_file: Path where to save the file
            markdown_content: Markdown content to save
        """
        # Create output directory if it doesn't exist
        output_file.parent.mkdir(parents=True, exist_ok=True)
        
        # Save the file
        with open(output_file, "w", encoding="utf-8") as f:
            f.write(markdown_content)
        
        logger.debug(f"Saved Markdown file: {output_file}")
